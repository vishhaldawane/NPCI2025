

25 yrs
C++/Java/Spring/DB/Unix
NLP
Quantum Mechanics
Energy Psychology


			Design Patterns

   x y z


			who????? am i???
			|oops programmer
		--------------------
		|		|
		where		when
		|space		|time
	----------------------------------
	|		|		|
	why		what		how
	|reason		|inFORMation	|implement[ action ]
			


Design pattern are typical solutions to commonly occuring problems 
in software design.

	intent : problem and its solution

	motivation : possibility

	structure : how to do it - relation of parts

	code : actual implementation


		types of patterns

	1. Creational
		create pillar

	2. Structural
		organize these pillars to make bridge

	3. Behavioral
		interaction between objects, pillars



			Association of objects
				|
		----------------------------------
		|	|		|	|
		isA	hasA		usesA	producesA


	Object = data + functions

		class Machine
		{
			data + functions
		}
		class WashingMachine extends Machine //isA
		{
			WashingTub washTub = new WashingTub();//hasA
			
			produce		use	   use     use       use
			Laundry wash(Detergent d, Water w, Cloth c[],Electricity e)
			{
				washing loop activity of wash,rinse and spin etc
				Laundry laundry = new Laundry(....);
				return laundry;
			}
			
		}
		class Laundry
		{
			bill of electricity + detergent + water 
		}
		class WashRoom extends Room
		{
			BathTub bathTub = new BathTub();

		}
		class Tub { }
		class WashingTub extends Tub { }
		class BathTub extends Tub  { }

		class House
		{
			WashRoom washRoom = new WashRoom(); //hasA
		}





	Employee emp1 = new Employee(.........);


	Employee emp2 = new Employee();


1. Singleton
2. Factory
3. Abstract factory
4. Prototype
5. Builder
6. Adapter
7. Proxy
8. Template
9. Iterator
10. Observer
11. Mediator
12. Strategy  
13. Decorator 
14. Bridge 
15. Composite 
16. Facade
17. Flyweight
18. Memento
19. State
20. Command
21. Chain Of Responsibility
22. Interpreter
23. Object pool 20 









24. DAO
25. MVC
26. DI




















